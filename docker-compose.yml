version: '3.7'
services:
  mysql:
    container_name: mysql-mcp-market-local
    image: mysql:8.0
    ports:
      - target: ${MYSQL_INNER_PORT_MEMBER}
        published: ${MYSQL_OUTER_PORT_MEMBER}
        protocol: tcp
        host_ip: 0.0.0.0
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE_MEMBER}
      - MYSQL_USER=${MYSQL_USER_MEMBER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD_MEMBER}
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD_MEMBER}
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      mm_local_network:
        ipv4_address: ${NETWORK_MYSQL_IP_MEMBER}
    restart: always
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mm_local_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - 9092:9092     # 도커 내부
      - 29092:29092   # 로컬에서 접속
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - mm_local_network

  redis:
    container_name: redis-mcp-market-local
    image: redis:latest
    ports:
      - target: ${REDIS_INNER_PORT}
        published: ${REDIS_OUTER_PORT}
        protocol: tcp
        host_ip: 0.0.0.0
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      mm_local_network:
        ipv4_address: ${NETWORK_REDIS_IP}
    restart: always

  mongodb:
    container_name: mongodb-mcp-market-local
    image: mongo:latest
    ports:
      - target: ${MONGODB_INNER_PORT}
        published: ${MONGODB_OUTER_PORT}
        protocol: tcp
        host_ip: 0.0.0.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
    networks:
      mm_local_network:
       ipv4_address: ${NETWORK_MONGODB_IP}
    restart: always

  connect:
    # image: my-registry/kafka-connect:2.7.0   # 우리가 빌드한 이미지 사용
    build:
      context: .          # 현재 디렉토리의 Dockerfile 사용
      dockerfile: Dockerfile
    container_name: kafka-connect
    ports:
      - 8083:8083
    env_file:
      - ./local.env
    environment:
      CONNECT_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS} # todo 배포용 컴포즈 만들 때는 수정 필요
      CONNECT_GROUP_ID: cg-my-connector
      CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: /opt/kafka-plugins
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      # (선택) register 스크립트용 변수
      CONNECT_URL: http://localhost:8083
      DEV_ENV_PATH: /etc/local.env

    depends_on:
      - kafka
      - mysql
      - mongodb
    volumes:
      # Source Connector
      - ./configs/connector-mcp-config.json:/etc/kafka-connect/connector-mcp-config.json
      - ./configs/connector-member-config.json:/etc/kafka-connect/connector-member-config.json
      # Mongo Sink Connector
      - ./configs/mongo-sink-config.json:/etc/kafka-connect/mongo-sink-config.json
      - ./configs/redis-sink-config.json:/etc/kafka-connect/redis-sink-config.json
      - ./configs/elasticsearch-sink-config.json:/etc/kafka-connect/elasticsearch-sink-config.json
      - ./local.env:/etc/local.env:ro
    networks:
      mm_local_network:
        ipv4_address: ${NETWORK_KAFKA_CONNECT_IP}

  elasticsearch:
    container_name: elasticsearch-mcp-market-local
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - target: ${ES_INNER_PORT}
        published: ${ES_OUTER_PORT}
        protocol: tcp
        host_ip: 0.0.0.0
    networks:
      mm_local_network:
        ipv4_address: ${NETWORK_ES_IP}
    restart: always

networks:
  mm_local_network:
    name: mm_local_network
    driver: bridge
    internal: false
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}
          ip_range: ${NETWORK_IP_RANGE}
          gateway: ${NETWORK_GATEWAY}
